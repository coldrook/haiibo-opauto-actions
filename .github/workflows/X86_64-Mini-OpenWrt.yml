#===============================================
# Description: Build OpenWrt
# File name: build-openwrt.yml
# Lisence: MIT
# Author: P3TERX
# https://github.com/P3TERX
#===============================================

name: X86_64 Mini OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  #schedule:
    #- cron: 0 19 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/x86_64-mini.config
  DIY_SCRIPT: diy-mini.sh
  AUTO_SCRIPT: auto.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
    
    - name: Maximize Build Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 6144
        swap-size-mb: 10240
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        
    - name: Checkout
      uses: actions/checkout@main
    
    - name: Disk space
      run: |
           echo "Free space:"
           df -h
           
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        sudo bash -c "curl -skL https://raw.githubusercontent.com/sbwml/actions/openwrt-build-setup/sources-24.04.list > /etc/apt/sources.list"
        sudo apt-get update
        sudo apt-get install -y build-essential flex bison cmake g++ gawk gcc-multilib g++-multilib gettext git gnutls-dev libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename qemu-utils jq
        sudo apt-get clean
        sudo timedatectl set-timezone "$TZ"
      
    - name: Clone Source Code
      id: clone
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
       ccache: 'true' #'true' 默认值
       # 清空缓存: 'true' (清除缓存), 'false' (不清除缓存, 重用缓存).  设置为 'false' 以加速后续构建.
       clean:  'false'  # 'false' 默认值
       prefix: ${{ github.workspace }}/openwrt

    #- name: Clone Source Code
    #  run: |
    #    df -hT $GITHUB_WORKSPACE
    #    git clone $REPO_URL -b $REPO_BRANCH openwrt
    #    cd openwrt
    #    echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
    #    COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
    #    echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
    #    COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
    #    echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
    #    COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
    #    echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
    #    COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
    #    echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    #- name: Generate Variables
    #  run: |
    #    cd $OPENWRT_PATH
    #    SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
    #    echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
    #    DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
    #    echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
    #    DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
    #    echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    #- name: Cache Toolchain
    #  if: env.CACHE_TOOLCHAIN == 'true'
    #  uses: HiGarfield/cachewrtbuild@main
    #  with:
    #    ccache: false
    #    mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
    #    prefix: ${{ env.OPENWRT_PATH }}
     
    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load lenyu sh
      run: |
        chmod +x $AUTO_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$AUTO_SCRIPT
        
    - name: lenyu
      run: |
        cd $OPENWRT_PATH 
        bash  lenyu.sh

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_KERNEL
        $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh

    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Generate Firmware
      id: generate
      run: |
        cd $OPENWRT_PATH
        mkdir -p files/etc/uci-defaults
        cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s
        # make -j$(nproc) || make -j1 || make -j1 V=s
        # make package/install -j$(nproc) || make package/install -j1 V=s
        # make target/install -j$(nproc) || make target/install -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check Space Usage
      if: always()
      run: df -hT

    - name: Upload Bin Directory
      if: steps.generate.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: delete files
      run: |
        cd $OPENWRT_PATH 
        bash  rename.sh

    - name: Organize Files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        # rm -rf packages
        rm -rf packages *.buildinfo *.manifest *kernel.bin *rootfs.img.gz
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware To Artifact
      if: steps.organize.outputs.status == 'success' && !cancelled()
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo 'release_name<<EOF' >> $GITHUB_ENV
        cat openwrt/wget/op_version1| awk 'NR==1' >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
        touch log.txt
        git -C openwrt log --pretty=format:"%s(#By %an)"  --graph --since=3.hour >> log.txt
        git -C openwrt/feeds/packages log --pretty=format:"%s(#By %an)"  --graph --since=3.hour >> log.txt
        git -C openwrt/feeds/luci log --pretty=format:"%s(#By %an)"  --graph --since=3.hour >> log.txt
        git -C openwrt/feeds/routing log --pretty=format:"%s(#By %an)"  --graph --since=3.hour >> log.txt
        git -C openwrt/feeds/telephony log --pretty=format:"%s(#By %an)"  --graph --since=3.hour >> log.txt
        # git -C openwrt/feeds/helloworld log --pretty=format:"%s(#By %an)"  --graph --since=4.hour >> log.txt
        # git -C openwrt/feeds/passwall log --pretty=format:"%s(#By %an)"  --graph --since=8.hour >> log.txt
        git -C openwrt/package/luci-app-openclash log --pretty=format:"%s(#By %an)"  --graph --since=8.hour >> log.txt
        test  ! -s log.txt && echo -e "\n* The source code is not updated." >> log.txt
        sed -i '1i ## Firmware Update Log' log.txt
        echo "status=success" >> $GITHUB_OUTPUT
              
    - name: Create release
      id: release
      uses: ncipollo/release-action@main
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.release_name }}
        tag: ${{ env.release_name }}
        token: ${{ secrets.GITHUB_TOKEN }}
        bodyfile: log.txt
        artifacts: ${{ env.FIRMWARE_PATH }}/*
